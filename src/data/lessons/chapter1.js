export const lessons = [
  {
    id: "1-1",
    chapter: "第1章 初心者向け必須知識",
    title: "コンポーネントはReactの基本単位",
    content: `
<div class="lesson-content">
  <p>
    Reactの基本的な構成要素はコンポーネントです。コンポーネントはUIの一部分を独立して管理し、再利用可能にするためのものです。
  </p>
  
  <p>
    コンポーネントは、UIの一部を表現する独立したモジュールです。以下はシンプルなコンポーネントの例です。
  </p>
  <p>
    コンポーネントはHTMLのタグのように使われ、UIを構築する際に小さな部品として組み合わせます。
    これにより、コードの再利用性と保守性が向上します。また、コンポーネントは自己完結型であり、
    それぞれが独自の状態とロジックを持つことができます。
  </p>

  <div class="note-block">
    <h3>補足：</h3>
    <p>
      Reactのコンポーネントには2種類あります。1つは「関数コンポーネント」、もう1つは「クラスコンポーネント」です。
      関数コンポーネントはシンプルで、状態管理が必要ない場合に使われます。クラスコンポーネントはより複雑な
      ロジックや状態管理が必要な場合に使われます。
    </p>
  </div>
</div>`,
  },
  {
    id: "1-2",
    chapter: "第1章 初心者向け必須知識",
    title: "コンポーネントは関数またはクラスで定義される",
    content: `
<div class="lesson-content">
  <p>
    Reactのコンポーネントは関数またはクラスとして定義されます。関数コンポーネントはシンプルで、
    クラスコンポーネントはより複雑な機能を持つことができます。
  </p>

  <p>
    関数コンポーネントとクラスコンポーネントの両方の例を示します。
  </p>

  <p>
    関数コンポーネントは単純なUIを表示するのに適しており、クラスコンポーネントは状態管理や
    ライフサイクルメソッドを使用する際に便利です。
  </p>

  <div class="note-block">
    <h3>補足：</h3>
    <p>
      Reactのフック（Hooks）により、関数コンポーネントでも状態やライフサイクルメソッドを
      使用できるようになりました。代表的なフックにはuseStateやuseEffectがあります。
      これにより、関数コンポーネントがより多機能かつ強力になり、クラスコンポーネントの
      使用が減少する傾向にあります。
    </p>
  </div>
</div>`,
  },
  {
    id: "1-3",
    chapter: "第1章 初心者向け必須知識",
    title: "JSXの基本：HTMLに似た構文",
    content: "JSXの基本構文と、HTMLとの類似点および相違点について学びます。",
  },
  {
    id: "1-4",
    chapter: "第1章 初心者向け必須知識",
    title: "JSXでコンポーネントのUI記述",
    content:
      "JSXを用いて、ReactコンポーネントのUIをどのように記述するかを学びます。",
  },
  {
    id: "1-5",
    chapter: "第1章 初心者向け必須知識",
    title: "コンポーネント間でのデータの受け渡しにpropsを使用する",
    content:
      "propsを使用して、親子間のコンポーネントでデータを受け渡す方法を理解します。",
  },
  {
    id: "1-6",
    chapter: "第1章 初心者向け必須知識",
    title: "propsは読み取り専用で親から子へ渡される",
    content:
      "propsの特性として、読み取り専用であり、親コンポーネントから子コンポーネントへ渡されることを学びます。",
  },
  {
    id: "1-7",
    chapter: "第1章 初心者向け必須知識",
    title: "useStateフックで状態管理",
    content:
      "useStateフックを使用して、コンポーネント内で状態を管理する方法を学びます。",
  },
  {
    id: "1-8",
    chapter: "第1章 初心者向け必須知識",
    title: "useEffectフックで副作用の処理",
    content:
      "useEffectフックを用いて、副作用（サイドエフェクト）の処理方法を理解します。",
  },
  {
    id: "1-9",
    chapter: "第1章 初心者向け必須知識",
    title: "コンポーネントの状態(state)管理",
    content: "コンポーネント内の状態管理の重要性と基本的な方法を学びます。",
  },
  {
    id: "1-10",
    chapter: "第1章 初心者向け必須知識",
    title: "useStateフックによる状態管理",
    content: "useStateフックを活用した具体的な状態管理の実践方法を学びます。",
  },
  {
    id: "1-11",
    chapter: "第1章 初心者向け必須知識",
    title: "状態の変化によるコンポーネントの再レンダリング",
    content:
      "状態が変化した際に、コンポーネントがどのように再レンダリングされるかを理解します。",
  },
  {
    id: "1-12",
    chapter: "第1章 初心者向け必須知識",
    title: "JSX内でのイベントハンドラの定義",
    content:
      "JSX内でイベントハンドラを定義し、ユーザーの操作に応答する方法を学びます。",
  },
  {
    id: "1-13",
    chapter: "第1章 初心者向け必須知識",
    title: "イベントプロパティのキャメルケース記法",
    content:
      "Reactにおけるイベントプロパティの命名規則として、キャメルケース記法を理解します。",
  },
  {
    id: "1-14",
    chapter: "第1章 初心者向け必須知識",
    title: "条件付きレンダリングの実装方法",
    content:
      "条件に応じてコンポーネントや要素をレンダリングする方法を学びます。",
  },
  {
    id: "1-15",
    chapter: "第1章 初心者向け必須知識",
    title: "配列をリストとして表示する",
    content:
      "配列データをReactでリスト表示する方法と、その際の注意点を理解します。",
  },
  {
    id: "1-16",
    chapter: "第1章 初心者向け必須知識",
    title: "リスト要素にユニークなキーを設定する",
    content:
      "リストレンダリング時に各要素にユニークなキーを設定する重要性と方法を学びます。",
  },
  {
    id: "1-17",
    chapter: "第1章 初心者向け必須知識",
    title: "Reactのkey属性の重要性",
    content:
      "key属性がReactのレンダリングにおいて果たす役割とその重要性を理解します。",
  },
  {
    id: "1-18",
    chapter: "第1章 初心者向け必須知識",
    title: "Reactコンポーネントのライフサイクル理解",
    content:
      "Reactコンポーネントのライフサイクルと各フェーズの特徴を学びます。",
  },
  {
    id: "1-19",
    chapter: "第1章 初心者向け必須知識",
    title: "useEffectでライフサイクル管理",
    content:
      "useEffectフックを使用して、コンポーネントのライフサイクル（マウント、アンマウント、更新）に応じた処理を実装する方法を学びます。",
  },
  {
    id: "1-20",
    chapter: "第1章 初心者向け必須知識",
    title: "クリーンアップ関数でリソース管理",
    content:
      "useEffect内でクリーンアップ関数を定義し、不要になったリソースやイベントリスナーを適切に解放する方法を理解します。",
  },
  {
    id: "1-21",
    chapter: "第1章 初心者向け必須知識",
    title: "グローバル状態管理にコンテキストAPIを活用",
    content:
      "コンテキストAPIを使用して、アプリケーション全体で共有する状態や関数を管理する方法を学びます。",
  },
  {
    id: "1-22",
    chapter: "第1章 初心者向け必須知識",
    title: "createContextでコンテキストを作成",
    content:
      "ReactのcreateContext関数を用いて、新しいコンテキストを作成し、その用途と基本的な使い方を理解します。",
  },
  {
    id: "1-23",
    chapter: "第1章 初心者向け必須知識",
    title: "コンテキストの提供: Providerコンポーネントの使用",
    content:
      "作成したコンテキストをProviderコンポーネントでラップし、子コンポーネントにコンテキストの値を提供する方法を学びます。",
  },
  {
    id: "1-24",
    chapter: "第1章 初心者向け必須知識",
    title: "コンテキストの使用: useContextフックの活用",
    content:
      "useContextフックを使用して、コンテキストの値をコンポーネント内で取得し、利用する方法を理解します。",
  },
  {
    id: "1-25",
    chapter: "第1章 初心者向け必須知識",
    title: "ロジック再利用のためのカスタムフック",
    content:
      "複数のコンポーネントで共通するロジックをカスタムフックとして抽出し、再利用性を高める方法を学びます。",
  },
];
